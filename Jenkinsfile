pipeline {
    agent any
    stages {
        stage('Clone') {
            steps { git 'https://github.com/saadrabbani/loan-calculator-devsecops.git' }
        }
        stage('Build') {
            steps { sh 'docker build -t loan-calculator:latest .' }
        }
        stage('Unit Test') {
            steps { 
                sh 'python3 -m unittest discover -s tests -p "test_*.py"'
            }
        }
        stage('Dependency Scan') {
            steps { 
                sh '''
                    echo "üîç Running Trivy dependency scan..."
                    
                    # Method 1: Try running Trivy with Docker (most reliable)
                    if docker --version >/dev/null 2>&1; then
                        echo "üì¶ Using Docker-based Trivy scan..."
                        docker run --rm -v "$(pwd):/workspace" -w /workspace aquasec/trivy:latest fs --format table --output /workspace/trivy-report-table.txt . || echo "‚ö†Ô∏è Docker Trivy scan had issues"
                        
                        # Also generate JSON and try HTML
                        docker run --rm -v "$(pwd):/workspace" -w /workspace aquasec/trivy:latest fs --format json --output /workspace/trivy-report.json . || true
                        docker run --rm -v "$(pwd):/workspace" aquasec/trivy:latest fs --format template --template "@contrib/html.tpl" --output /workspace/trivy-report.html . || echo "‚ö†Ô∏è HTML template not available"
                    
                    # Method 2: Try native Trivy if Docker fails
                    elif trivy --version >/dev/null 2>&1; then
                        echo "üîß Using native Trivy installation..."
                        
                        # Copy files to /tmp to avoid snap restrictions
                        TEMP_DIR="/tmp/trivy-scan-$$"
                        mkdir -p "$TEMP_DIR"
                        cp -r . "$TEMP_DIR/"
                        cd "$TEMP_DIR"
                        
                        trivy fs --format table --output trivy-report-table.txt . || echo "‚ö†Ô∏è Native Trivy scan had issues"
                        trivy fs --format json --output trivy-report.json . || true
                        
                        # Copy reports back
                        cp *.txt *.json "$WORKSPACE/" 2>/dev/null || true
                        cd "$WORKSPACE"
                        rm -rf "$TEMP_DIR"
                    
                    # Method 3: Manual dependency check if Trivy fails
                    else
                        echo "‚ö†Ô∏è Trivy not available, performing manual dependency check..."
                        echo "üìã Checking requirements.txt for known vulnerable packages..."
                        
                        # Create a simple vulnerability report
                        cat > trivy-report-table.txt << EOF
DEPENDENCY SCAN RESULTS
========================
Scanning: requirements.txt

EOF
                        
                        if [ -f "requirements.txt" ]; then
                            echo "üì¶ Found dependencies:" >> trivy-report-table.txt
                            cat requirements.txt >> trivy-report-table.txt
                            echo "" >> trivy-report-table.txt
                            echo "‚ö†Ô∏è Manual review required - Trivy unavailable" >> trivy-report-table.txt
                        else
                            echo "‚ùå No requirements.txt found" >> trivy-report-table.txt
                        fi
                    fi
                    
                    # Display results
                    echo "üìÑ Dependency scan completed!"
                    echo "==================== TRIVY RESULTS ===================="
                    
                    if [ -f "trivy-report-table.txt" ]; then
                        cat trivy-report-table.txt
                        
                        # Count vulnerabilities if file contains them
                        CRITICAL=$(grep -c "CRITICAL" trivy-report-table.txt 2>/dev/null || echo "0")
                        HIGH=$(grep -c "HIGH" trivy-report-table.txt 2>/dev/null || echo "0")
                        MEDIUM=$(grep -c "MEDIUM" trivy-report-table.txt 2>/dev/null || echo "0")
                        LOW=$(grep -c "LOW" trivy-report-table.txt 2>/dev/null || echo "0")
                        
                        echo ""
                        echo "üö® VULNERABILITY SUMMARY:"
                        echo "   CRITICAL: $CRITICAL"
                        echo "   HIGH: $HIGH" 
                        echo "   MEDIUM: $MEDIUM"
                        echo "   LOW: $LOW"
                    else
                        echo "‚ùå No scan results available"
                    fi
                    
                    echo "======================================================="
                '''
            }
        }
        stage('Deploy') {
            steps { 
                sh '''
                    echo "üöÄ Starting deployment..."
                    
                    # Cleanup old containers
                    docker stop loan-app 2>/dev/null || echo "‚ÑπÔ∏è No existing container to stop"
                    docker rm loan-app 2>/dev/null || echo "‚ÑπÔ∏è No existing container to remove"
                    
                    # Deploy new container
                    if docker run -d -p 5000:5000 --name loan-app loan-calculator:latest; then
                        echo "‚úÖ Container started successfully"
                    else
                        echo "‚ùå Failed to start container"
                        exit 1
                    fi
                    
                    # Wait for app to start
                    echo "‚è≥ Waiting for application to start..."
                    sleep 15
                    
                    # Health check with retries
                    for i in {1..5}; do
                        if curl -f http://localhost:5000 >/dev/null 2>&1; then
                            echo "‚úÖ Application is running at http://localhost:5000"
                            break
                        else
                            echo "‚è≥ Health check attempt $i failed, retrying..."
                            sleep 5
                            if [ $i -eq 5 ]; then
                                echo "‚ùå Application health check failed after 5 attempts!"
                                echo "üìã Container logs:"
                                docker logs loan-app
                                exit 1
                            fi
                        fi
                    done
                '''
            }
        }
      

stage('DAST - Security Testing') {
    steps { 
        sh '''
            echo "üõ°Ô∏è DYNAMIC APPLICATION SECURITY TESTING"
            echo "========================================"
            
            # Comprehensive manual security testing (always works)
            echo "üîç Performing security assessment of http://localhost:5000"
            
            # Test 1: Basic connectivity and response
            echo ""
            echo "TEST 1: Application Connectivity"
            echo "================================"
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:5000 | grep -q "200"; then
                echo "‚úÖ Application responds with HTTP 200"
                APP_STATUS="RUNNING"
            else
                echo "‚ùå Application not responding properly"
                APP_STATUS="ERROR"
            fi
            
            # Test 2: Security headers analysis
            echo ""
            echo "TEST 2: Security Headers Analysis"
            echo "================================="
            curl -I http://localhost:5000 2>/dev/null > headers.txt
            
            # Check for important security headers
            if grep -q "X-Frame-Options" headers.txt; then
                echo "‚úÖ X-Frame-Options header present"
                XFRAME="PRESENT"
            else
                echo "‚ö†Ô∏è X-Frame-Options header missing"
                XFRAME="MISSING"
            fi
            
            if grep -q "X-XSS-Protection" headers.txt; then
                echo "‚úÖ X-XSS-Protection header present"
                XXSS="PRESENT"
            else
                echo "‚ö†Ô∏è X-XSS-Protection header missing"
                XXSS="MISSING"
            fi
            
            if grep -q "Content-Security-Policy" headers.txt; then
                echo "‚úÖ Content-Security-Policy header present"
                CSP="PRESENT"
            else
                echo "‚ö†Ô∏è Content-Security-Policy header missing"
                CSP="MISSING"
            fi
            
            # Test 3: XSS vulnerability test
            echo ""
            echo "TEST 3: Cross-Site Scripting (XSS) Test"
            echo "======================================"
            XSS_PAYLOAD="<script>alert('XSS')</script>"
            XSS_RESPONSE=$(curl -s "http://localhost:5000/?test=$XSS_PAYLOAD" 2>/dev/null)
            
            if echo "$XSS_RESPONSE" | grep -q "<script>"; then
                echo "‚ö†Ô∏è POTENTIAL XSS VULNERABILITY - Script tags not filtered"
                XSS_RISK="HIGH"
            else
                echo "‚úÖ XSS test passed - Script tags appear to be filtered"
                XSS_RISK="LOW"
            fi
            
            # Test 4: HTTP methods test
            echo ""
            echo "TEST 4: HTTP Methods Security Test"
            echo "================================="
            
            # Test dangerous methods
            for method in OPTIONS TRACE PUT DELETE; do
                RESPONSE=$(curl -s -X $method -I http://localhost:5000 2>/dev/null | head -1)
                if echo "$RESPONSE" | grep -q "200\\|405"; then
                    echo "üîç $method: $(echo $RESPONSE | cut -d' ' -f2-)"
                fi
            done
            
            # Test 5: Error handling test
            echo ""
            echo "TEST 5: Error Information Disclosure Test"
            echo "========================================"
            ERROR_RESPONSE=$(curl -s "http://localhost:5000/nonexistent-page-test" 2>/dev/null)
            
            if echo "$ERROR_RESPONSE" | grep -qi "error\\|exception\\|stack\\|traceback"; then
                echo "‚ö†Ô∏è Application may be disclosing error information"
                ERROR_DISCLOSURE="HIGH"
            else
                echo "‚úÖ Error handling appears secure"
                ERROR_DISCLOSURE="LOW"
            fi
            
            # Generate comprehensive HTML report
            cat > zap-report.html << EOF
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Security Assessment Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background: #2c3e50; color: white; padding: 20px; }
        .section { margin: 20px 0; padding: 15px; border-left: 4px solid #3498db; }
        .risk-high { border-left-color: #e74c3c; background: #fdf2f2; }
        .risk-medium { border-left-color: #f39c12; background: #fef9e7; }
        .risk-low { border-left-color: #27ae60; background: #eafaf1; }
        .test-result { margin: 10px 0; padding: 10px; background: #f8f9fa; }
        pre { background: #2c3e50; color: white; padding: 10px; overflow-x: auto; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üõ°Ô∏è Dynamic Application Security Testing (DAST) Report</h1>
        <p><strong>Target:</strong> http://localhost:5000</p>
        <p><strong>Scan Date:</strong> $(date)</p>
        <p><strong>Scan Method:</strong> Manual Security Assessment</p>
    </div>

    <div class="section">
        <h2>üìä Executive Summary</h2>
        <p><strong>Application Status:</strong> $APP_STATUS</p>
        <p><strong>Overall Risk Level:</strong> $([ "$XSS_RISK" = "HIGH" ] || [ "$ERROR_DISCLOSURE" = "HIGH" ] && echo "HIGH" || echo "MEDIUM")</p>
        <p><strong>Tests Performed:</strong> 5 security tests completed</p>
    </div>

    <div class="section $([ "$XSS_RISK" = "HIGH" ] && echo "risk-high" || echo "risk-low")">
        <h2>üîç Test Results</h2>
        
        <div class="test-result">
            <h3>1. Application Connectivity Test</h3>
            <p><strong>Result:</strong> $APP_STATUS</p>
            <p>Application accessibility and basic response validation.</p>
        </div>
        
        <div class="test-result">
            <h3>2. Security Headers Analysis</h3>
            <p><strong>X-Frame-Options:</strong> $XFRAME</p>
            <p><strong>X-XSS-Protection:</strong> $XXSS</p>
            <p><strong>Content-Security-Policy:</strong> $CSP</p>
        </div>
        
        <div class="test-result">
            <h3>3. Cross-Site Scripting (XSS) Test</h3>
            <p><strong>Risk Level:</strong> $XSS_RISK</p>
            <p>Tested application's handling of potentially malicious script content.</p>
        </div>
        
        <div class="test-result">
            <h3>4. HTTP Methods Security</h3>
            <p>Analyzed supported HTTP methods and their security implications.</p>
        </div>
        
        <div class="test-result">
            <h3>5. Error Information Disclosure</h3>
            <p><strong>Risk Level:</strong> $ERROR_DISCLOSURE</p>
            <p>Tested whether application leaks sensitive information in error messages.</p>
        </div>
    </div>

    <div class="section">
        <h2>üîß Recommendations</h2>
        <ul>
            <li><strong>High Priority:</strong> Install OWASP ZAP for comprehensive vulnerability scanning</li>
            <li><strong>Security Headers:</strong> Implement missing security headers (CSP, X-Frame-Options, etc.)</li>
            <li><strong>Input Validation:</strong> Ensure all user inputs are properly validated and sanitized</li>
            <li><strong>Error Handling:</strong> Implement secure error handling that doesn't leak information</li>
            <li><strong>HTTPS:</strong> Use HTTPS in production environment</li>
            <li><strong>Rate Limiting:</strong> Implement rate limiting to prevent abuse</li>
        </ul>
    </div>

    <div class="section">
        <h2>üìã Raw HTTP Headers</h2>
        <pre>$(cat headers.txt)</pre>
    </div>

    <div class="section">
        <h2>üè∑Ô∏è Report Information</h2>
        <p><strong>Generated By:</strong> Jenkins CI/CD Pipeline</p>
        <p><strong>Tool:</strong> Manual Security Assessment</p>
        <p><strong>Note:</strong> For comprehensive security testing, integrate OWASP ZAP</p>
    </div>
</body>
</html>
EOF

            # Generate markdown report
            cat > zap-report.md << EOF
# üõ°Ô∏è DAST Security Assessment Report

**Target:** http://localhost:5000  
**Date:** $(date)  
**Method:** Manual Security Testing

## üìä Summary
- **Application Status:** $APP_STATUS
- **XSS Risk:** $XSS_RISK  
- **Error Disclosure Risk:** $ERROR_DISCLOSURE
- **Security Headers:** Missing $([ "$CSP" = "MISSING" ] && echo "CSP, "; [ "$XFRAME" = "MISSING" ] && echo "X-Frame-Options, "; [ "$XXSS" = "MISSING" ] && echo "X-XSS-Protection" | sed 's/, $//')

## üîç Detailed Results

### Security Headers Status:
- X-Frame-Options: $XFRAME
- X-XSS-Protection: $XXSS  
- Content-Security-Policy: $CSP

### Vulnerability Tests:
- XSS Protection: $XSS_RISK risk level
- Error Disclosure: $ERROR_DISCLOSURE risk level

## üéØ Recommendations:
1. Install OWASP ZAP: \`sudo apt install zaproxy\`
2. Implement Content Security Policy
3. Add missing security headers
4. Validate all user inputs
5. Use HTTPS in production
6. Implement proper error handling

---
*Generated by Jenkins Pipeline Security Testing*
EOF

            echo ""
            echo "üìä SECURITY ASSESSMENT COMPLETED!"
            echo "================================="
            echo "‚úÖ HTML Report: zap-report.html"
            echo "‚úÖ Markdown Report: zap-report.md"
            echo ""
            echo "üîç Key Findings:"
            echo "   - XSS Risk Level: $XSS_RISK"
            echo "   - Error Disclosure Risk: $ERROR_DISCLOSURE"
            echo "   - Security Headers: $([ "$CSP" = "MISSING" ] && [ "$XFRAME" = "MISSING" ] && echo "Multiple missing" || echo "Some present")"
            echo ""
            echo "üìÅ Reports saved and ready for download!"
        '''
    }
}


        stage('Report Summary') {
            steps {
                sh '''
                    echo "üìä SECURITY SCAN SUMMARY"
                    echo "========================="
                    
                    echo "üìÅ Generated Reports:"
                    ls -la *.html *.txt *.json *.md 2>/dev/null || echo "No reports found"
                    
                    echo ""
                    echo "üîó Report Access Methods:"
                    echo "   1. ‚úÖ Console output (scroll up to see results)"
                    echo "   2. üìÅ Jenkins build artifacts (download below)"
                    echo "   3. üåê Application running at: http://localhost:5000"
                    
                    # Validate reports exist
                    if [ -f "trivy-report-table.txt" ]; then
                        echo "   4. ‚úÖ Dependency scan report available"
                    else
                        echo "   4. ‚ö†Ô∏è Dependency scan report missing"
                    fi
                    
                    if [ -f "zap-report.html" ] || [ -f "zap-report.md" ]; then
                        echo "   5. ‚úÖ Security scan report available"
                    else
                        echo "   5. ‚ö†Ô∏è Security scan report missing"
                    fi
                '''
            }
        }
    }
    post {
        always {
            // Archive ALL report files as Jenkins artifacts
            archiveArtifacts artifacts: '*.html, *.txt, *.json, *.md', allowEmptyArchive: true, fingerprint: true
            
            // Clean up any temporary files
            sh 'rm -rf /tmp/trivy-scan-* 2>/dev/null || true'
        }
        success {
            echo '''
            üéâ PIPELINE COMPLETED SUCCESSFULLY!
            
            üìã WHAT TO DO NEXT:
            ================
            1Ô∏è‚É£ Scroll up to see detailed scan results in console
            2Ô∏è‚É£ Check "Build Artifacts" section below for downloadable reports
            3Ô∏è‚É£ Visit your application: http://localhost:5000
            4Ô∏è‚É£ Review security findings and fix any critical issues
            
            üí° TIP: Look for the "TRIVY RESULTS" and "ZAP RESULTS" sections above!
            '''
        }
        failure {
            echo '''
            ‚ùå PIPELINE FAILED!
            
            üîç TROUBLESHOOTING STEPS:
            ========================
            1Ô∏è‚É£ Check the console output above for specific error messages
            2Ô∏è‚É£ Verify all required tools are installed (Docker, Python, etc.)
            3Ô∏è‚É£ Check if ports are available (5000 for app)
            4Ô∏è‚É£ Ensure GitHub repository is accessible
            
            üí° TIP: Most common issues are permission problems or missing dependencies
            '''
        }
    }
}